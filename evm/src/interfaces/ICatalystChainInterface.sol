pragma solidity ^0.8.17;

import { ICatalystV1Structs } from "./ICatalystV1VaultState.sol";
import { ICrossChainReceiver } from "GeneralisedIncentives/src/interfaces/ICrossChainReceiver.sol";

// Autogenerated
interface ICatalystChainInterface is ICatalystV1Structs, ICrossChainReceiver {

    function EXPIRE_CALLER_REWARD() external view returns (uint256);
    function EXPIRE_CALLER_REWARD_DENOMINATOR() external view returns (uint256);
    function UNDERWRITING_COLLATORAL() external view returns (uint256);
    function UNDERWRITING_COLLATORAL_DENOMINATOR() external view returns (uint256);
    function chainIdentifierToDestinationAddress(bytes32) external view returns (bytes memory);
    function connectNewChain(bytes32 chainIdentifier, bytes memory remoteCCI, bytes memory remoteGARP) external;
    function estimateAdditionalCost() external view returns (address asset, uint256 amount);
    function expireUnderwrite(
        address targetVault,
        address toAsset,
        uint256 U,
        uint256 minOut,
        address toAccount,
        uint16 underwriteIncentiveX16,
        bytes memory cdata
    ) external;
    function getUnderwriteIdentifier(
        address targetVault,
        address toAsset,
        uint256 U,
        uint256 minOut,
        address toAccount,
        uint16 underwriteIncentiveX16,
        bytes memory cdata
    ) external pure returns (bytes32 identifier);
    function maxUnderwritingDuration() external view returns (uint256);
    function minGasFor(bytes32) external view returns (uint48);
    function sendCrossChainAsset(
        RouteDescription memory routeDescription,
        uint8 toAssetIndex,
        uint256 U,
        uint256 minOut,
        uint256 fromAmount,
        address fromAsset,
        uint16 underwriteIncentiveX16,
        bytes memory calldata_
    ) external payable;
    function sendCrossChainLiquidity(
        RouteDescription memory routeDescription,
        uint256 U,
        uint256[2] memory minOut,
        uint256 fromAmount,
        bytes memory calldata_
    ) external payable;
    function setMaxUnderwritingDuration(uint256 newMaxUnderwriteDuration) external;
    function setMinGasFor(bytes32 chainIdentifier, uint48 minGas) external;
    function underwrite(
        address targetVault,
        address toAsset,
        uint256 U,
        uint256 minOut,
        address toAccount,
        uint16 underwriteIncentiveX16,
        bytes memory cdata
    ) external returns (bytes32 identifier);
    function underwriteAndCheckConnection(
        bytes32 sourceIdentifier,
        bytes memory fromVault,
        address targetVault,
        address toAsset,
        uint256 U,
        uint256 minOut,
        address toAccount,
        uint16 underwriteIncentiveX16,
        bytes memory cdata
    ) external;
    function underwritingStorage(bytes32) external view returns (uint256 tokens, address refundTo, uint64 expiry, uint32 lastTouchBlock);
}